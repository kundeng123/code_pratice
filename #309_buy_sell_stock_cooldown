class Solution:
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if not prices:
            return 0
        
       # time complexity is O(n)
       # space complexity is O(3*n), could be O(1)!!
       
        s1 = [0] * (len(prices)+1)
        s2 = [0] * (len(prices)+1)
        s3 = [0] * (len(prices)+1)
        
        s1[0] = 0
        s2[0] = -prices[0]
        s3[0] = float("-inf")
        for i in range(1,len(prices)):
            
            s1[i] = max(s1[i-1], s3[i-1])
            s2[i] = max(s1[i-1] - prices[i], s2[i-1])
            s3[i] = s2[i-1] + prices[i]
            
            
        #print("s1 ",s1)
        #print("s2 ", s2)
        #print("s3 ", s3)
        return max(s1[len(prices)-1], s3[len(prices)-1])   

#using two pointer to scan through the list of height.
#notice that, left and right are NOT moving at the same speed. One of them will STOP at hightest of the height,
#whichever meets it faster. Then, move the other point towards the "highest", and counting local Max - current height
#couldn't answer it well during first round. 

class Solution:
    #time complexity is O(N), loop through the list of heights once. Space is O(1)
    
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        left = 0
        right = len(height) - 1
        
        leftMax = 0
        rightMax = 0
        
        result = 0
        
        while left < right:
            if height[left] < height[right]:
                if leftMax < height[left]:
                    leftMax = height[left]
                else:
                    result = result + leftMax - height[left]
                    print("result in leftMax ", result)
                left = left + 1
            else:
                if rightMax < height[right]:
                    rightMax = height[right]
                else:
                    result = result + rightMax - height[right]
                    print("result in rightMax ", result)
                right = right - 1
            print("left ", left)
            print("right ", right)
            print("---------")
            
            
            
        return result
                

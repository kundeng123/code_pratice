class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        N1 = len(nums1)
        N2 = len(nums2)
        N = N1 + N2
        
        i1 = 0
        i2 = 0
        i = 0
        
        currentNumber = None
        previousNumber = None
        
        while i < N:
            if i1 < N1 and i2 < N2 and nums1[i1] <= nums2[i2]:
                currentNumber = nums1[i1]
                i1 = i1 + 1
            elif i1 < N1 and i2 < N2 and nums1[i1] > nums2[i2]:
                currentNumber = nums2[i2]
                i2 = i2 + 1
            elif i1 >= N1:
                currentNumber = nums2[i2]
                i2 = i2 + 1
            elif i2 >= N2:
                currentNumber = nums1[i1]
                i1 = i1 + 1
            
            if N % 2 == 1 and i == N // 2:
                return currentNumber
            elif N % 2 == 0 and i == N//2:
                return (previousNumber + currentNumber)*0.5
            
            previousNumber = currentNumber
            i = i + 1
            
        return 0
     
//Java version
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int N = n1+n2;
        
        int index1 = 0;
        int index2 = 0;

        double currentNum = 0;
        double prevNum = 0;
        for(int i = 0; i<N; i++){
            //
            if(index1<n1 && index2<n2 && nums1[index1] <= nums2[index2]){
                currentNum = nums1[index1];
                index1++;
            }
            else if(index1<n1 && index2<n2 && nums1[index1] > nums2[index2]){
                currentNum = nums2[index2];
                index2++;
            }
            else if(index1>=n1){
                currentNum = nums2[index2];
                index2++;
            }
            else if(index2>=n2){
                currentNum = nums1[index1];
                index1++;
            }
            
            
            if(N % 2 == 0 && i == N/2){
                //System.out.println("prevNum" + prevNum);
                //System.out.println("currentNum" + currentNum);

                return (currentNum + prevNum)/2.0;
            }
            else if (N % 2 == 1 && i == N/2){
                return (double)currentNum;
            }
            
            prevNum = currentNum;
        }
        return currentNum;
        
    }
}

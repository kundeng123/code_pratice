class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s2) < len(s1):
            return False
        
        #cound s1 and create hashmap
        # time complexity: l1 = len(s2), l2 = len(l2)
        # O(l1 + 26 * (l2 - l1)
        # space O(1)
        
        s1Map = [0] * 26
        s2Map = [0] * 26
        
        for i in range(len(s1)):
            s1Map[ord(s1[i]) - ord('a')] = s1Map[ord(s1[i]) - ord('a')] + 1
            s2Map[ord(s2[i]) - ord('a')] = s2Map[ord(s2[i]) - ord('a')] + 1
            
        
        if self.compareMatch(s1Map,s2Map):
                return True
        #print("s1 ", s1Map)
        
        for i in range(len(s2) - len(s1)):
            
            
            s2Map[ord(s2[i + len(s1)]) - ord('a')] = s2Map[ord(s2[i + len(s1)]) - ord('a')] + 1
            s2Map[ord(s2[i]) - ord('a')] = s2Map[ord(s2[i]) - ord('a')] - 1
           
            #print("s2map ", s2Map)
            if self.compareMatch(s1Map,s2Map):
                return True
    
        return False
            
            
    def compareMatch(self, map1, map2):
        for i in range(len(map1)):
            if map1[i] != map2[i]:
                return False
        return True

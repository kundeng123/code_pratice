
class Solution:
    def fractionAddition(self, expression):
    
        #gcd complexity: O(log(a, b)). in total o(n * logx), where n = number in fraction, x is the maximun possible value of denominator
        def gcd(a, b):
            
            while b != 0:
                t= b
                b = a % b
                a = t
            return a
         
        def lcm(a,b):
            return a * b / gcd(a,b)
        part = ''
        fractions = []
        for c in expression:
            if c in '+-':
                if part: 
                    fractions.append(part)
                part = ''
            part += c
        if part: 
            fractions.append(part)
               
        print(fractions)
        
        numerator = []
        denominator = []
        for value in fractions:
            numerator.append(int(value.split('/')[0]))
            denominator.append(int(value.split('/')[1]))
        sum_of_nums = 0
        
        lcm_val = 1
        for i in range(len(denominator)):
    
            lcm_val = lcm(lcm_val, denominator[i])
        
        for j in range(len(numerator)):
            sum_of_nums += numerator[j] * lcm_val / denominator[j]

        #print(sum_of_nums)
        gcd_val = abs(gcd(sum_of_nums, lcm_val))
        
        return str(int(sum_of_nums/gcd_val)) + "/" + str(int(lcm_val/gcd_val))
    
    
----Java version
class Solution {
/*
Time complexity : O(n \log x)O(nlogx). Euclidean GCD algorithm takes O(\log(ab))O(log(ab)) time for finding gcd of two numbers aa and bb. Here nn refers to the number of fractions in the input string and xx is the maximum possible value of denominator.

Space complexity : O(n)O(n). Size of signsign list grows upto nn.
*/
    public int gcd(int a, int b){
        if ( a== 0){
            return Math.abs(b);
        }
        
        return gcd(b%a, a);
    }
    
    public String fractionAddition(String expression) {
        Scanner sc = new Scanner(expression).useDelimiter("/|(?=[-+])");
        int A = 0, B = 1;
        while (sc.hasNext()) {
            int a = sc.nextInt(), b = sc.nextInt();
            A = A * b + a * B;
            B *= b;
            int g = gcd(A, B);
            A /= g;
            B /= g;
        }
        return A + "/" + B;
    }
}
    

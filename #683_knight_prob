class Solution:
    def knightProbability(self, N, K, r, c):
        """
        :type N: int
        :type K: int
        :type r: int
        :type c: int
        :rtype: float
        """
        #using sum of probability method.
        # for each move, count how many points left on the board. and / 8 ** k
        
        
        moves = [(-2,-1),(-1,-2),(1,-2),(2,-1),
                 (-2,1),(-1,2),(1,2),(2,1)]
       
        dp = [[0] * N for  _ in range(N)]
        
        dp[r][c] = 1
        
        #print(dp)
        
        for steps in range(K):
            dp2 = [[0] * N for  _ in range(N)]
            #print(dp)
            for i in range(len(dp)):
                for j in range(len(dp[0])):
                    
                    if dp[i][j] >= 1:
                        #print("i and j ", i,j)
                        for dr,dc in moves:
                            if 0 <= i+dr < N and 0<= j+dc <N:
                                #print("r+dr ", i+dr)
                                #print("c+dc ", j+dc)
                                dp2[i+dr][j+dc] +=dp[i][j]
            dp = dp2
         
        #print("final dp ", dp)
        #print(sum([sum(i) for i in dp]))
        #print(8 ** N)
        
        print( 8 ** K)
        return (sum([sum(i) for i in dp])) / (8 ** K)
        
        
        #below is solution from the leetcode
        '''
        dp = [[0] * N for  _ in range(N)]
        dp[r][c] = 1 #prob of current move on the board is 1
        print(dp)
        for steps in range(K):
            dp2 = [[0] * N for  _ in range(N) ]
            for r, row in enumerate(dp):
                #print("---------------------------")
                #print("r " ,r)
                #print("row ", row)
                for c, val in enumerate(row):
                    #print("c ", c)
                    #print("val ", val)
                    for dr, dc in moves:
                        #print("r ", r)
                        #print("c", c)
                        
                        if 0 <= r+dr < N and 0<= c+dc <N:
                            
                            dp2[r+dr][c+dc] += val/8
                dp = dp2
                #print(dp)
        '''

//add java version
class Solution {
    public double knightProbability(int N, int K, int r, int c) {
        //moves (row, col)
        // (-2, 1), (-1, 2), (1, 2), (2, 1)
        // (2, -1), (1, -2), (-1, -2), (-2, -1)
        
        //boundry (0,0), (0,N), (N,N), (N, 0)
        
        double dp[][] = new double[N][N];
        double dp2[][] = new double[N][N];
        
        dp[r][c] = 1;
        
        for(int i = 0; i<K; i++){
            //for each move, calc prob
            dp2 = new double[N][N];
            for(int row=0; row < N; row++){
                for(int col=0; col<N; col++){
                    if(dp[row][col] >= 1){
                        //System.out.println("at point "+row+" " + col);
                        
                        if( row-2 < N && col+1 <N && row-2 >=0 && col+1 >= 0){
                            dp2[row-2][col+1]+=dp[row][col];
                        }
                        if(row-1 <N && col+2 <N && row-1>=0 && col+2 >= 0){
                            dp2[row-1][col+2]+=dp[row][col];
                        }
                        if(row+1 <N && col+2 <N && row+1 >= 0 && col+2>= 0){
                            dp2[row+1][col+2]+=dp[row][col];
                        }
                        if(row+2 <N && col+1 <N && row+2 >=0 && col+1>=0){
                            dp2[row+2][col+1]+=dp[row][col];
                        }
                        if(row+2 <N && col-1 <N && row+2 >=0 && col-1 >=0){
                            dp2[row+2][col-1]+=dp[row][col];
                        }
                        if(row+1 <N && col-2 <N && row+1 >=0 && col-2 >=0){
                            dp2[row+1][col-2]+=dp[row][col];
                        }
                        if(row-1 <N && col-2 <N && row-1 >=0 && col-2 >=0){
                            dp2[row-1][col-2]+=dp[row][col];
                        }
                        if(row-2 <N && col-1 <N && row-2 >=0 && col-1 >=0){
                            dp2[row-2][col-1]+=dp[row][col];
                        }
                    }
                    
                    
                }
            }
            
        
            
            dp = dp2;
         }
        
        double result = 0.0;
    
        for(int ii =0; ii<N; ii++){
            for(int jj = 0; jj<N; jj++){
                //System.out.println("dp " + dp[i][j]);
                if(dp[ii][jj]> 0){
                    result+=dp[ii][jj];
                }
            }
        }
    
        //System.out.println(result);
        return result/(double)Math.pow(8, K);
        
        //return 0;
    }
}

#option 1: Problem said the max size is 100000. therefore can take advantage of it, assign -1 to all values
# O(1) in get, remove and put

class MyHashMap:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.items = [-1] * 100000


    def put(self, key, value):
        """
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: void
        """
        self.items[key] = value
            

    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """
        return self.items[key]
        

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: void
        """
        self.items[key] = -1
            



#option 2: Not O(1) when get and put and remove. in python, index is O(n)
class MyHashMap:
    #just a simple way using two lists in python 
    
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.keys = []
        self.values = []

    def put(self, key, value):
        """
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: void
        """
        if key in self.keys:
            self.values[self.keys.index(key)] = value
        else:
            self.keys.append(key)
            self.values.append(value)
            

    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """
        if key in self.keys:
            return self.values[self.keys.index(key)]
        else:
            return -1
        

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: void
        """
        if key in self.keys:
            del self.values[(self.keys.index(key))]
            del self.keys[(self.keys.index(key))]
            


//Add java version
class MyHashMap {

    /** Initialize your data structure here. */
    
    ListNode[] nodes = new ListNode[10000];
    public MyHashMap() {
        
    }
    
    int index(int key){
        return Integer.hashCode(key) % nodes.length;
    }
    /** value will always be non-negative. */
    public void put(int key, int value) {
        int i = index(key);
        if(nodes[i] == null){
            nodes[i] = new ListNode(-1, -1);
        }
        ListNode prevNode = findNode(nodes[i], key);
        if (prevNode.next == null){
            prevNode.next = new ListNode(key, value);
        }
        else{
            prevNode.next.value = value;
        }
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int i = index(key);
        if(nodes[i] == null){
            return -1;
        }
        ListNode node = findNode(nodes[i],key);
        if (node.next == null)
            return -1;
        else
            return node.next.value;
        //return 0;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int i = index(key);
        if(nodes[i] != null){
        ListNode prevNode = findNode(nodes[i],key);
        if(prevNode.next != null)
            prevNode.next = prevNode.next.next;
    }
    }   
    class ListNode{
        int key;
        int value;
        ListNode next;
        ListNode(int key, int val){
            this.key = key;
            this.value = val;
        }
    }
    ListNode findNode(ListNode node, int key){
        ListNode tempNode = node;
        ListNode prevNode = null;
        while(node!=null && node.key != key){
            prevNode = node;
            node = node.next;
        }
        return prevNode;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */

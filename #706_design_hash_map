#option 1: Problem said the max size is 100000. therefore can take advantage of it, assign -1 to all values
# O(1) in get, remove and put

class MyHashMap:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.items = [-1] * 100000


    def put(self, key, value):
        """
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: void
        """
        self.items[key] = value
            

    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """
        return self.items[key]
        

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: void
        """
        self.items[key] = -1
            



#option 2: Not O(1) when get and put and remove. in python, index is O(n)
class MyHashMap:
    #just a simple way using two lists in python 
    
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.keys = []
        self.values = []

    def put(self, key, value):
        """
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: void
        """
        if key in self.keys:
            self.values[self.keys.index(key)] = value
        else:
            self.keys.append(key)
            self.values.append(value)
            

    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """
        if key in self.keys:
            return self.values[self.keys.index(key)]
        else:
            return -1
        

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: void
        """
        if key in self.keys:
            del self.values[(self.keys.index(key))]
            del self.keys[(self.keys.index(key))]
            




class Solution {
    public void sortColors(int[] nums) {
        
        int red = 0;
        int white = 0;
        int blue =0;
        
        //one-pass, using two pointer.
        //red -> left end, blue -> right end
        //if current is 0, swap it with red, red ++
        //if current is 2, swap it with blue, blue --
        //Time complexity, O(n)
        //Space O(1)
        blue = nums.length -1;
        int temp = 0;
        for (int i = 0; i<=blue; i++){
            if(nums[i] ==0){
                temp = nums[i];
                nums[i] = nums[red];
                nums[red] = temp;
                //swap(nums[i], nums[red]);
                red++;
            }
            else if(nums[i] == 2){
                temp = nums[i];
                nums[i] = nums[blue];
                nums[blue] = temp;
                blue--;
                //bug fix, after swap 2 and 0/1, need to do i--
                //so to check number at i which was swapped before
                i--;
            }
            
        }
        /**
        //two-pass, loop through the array twice
        //Time complexity O(n)
        //Space O(n)
        for ( int i=0; i<nums.length; i++) {
            if(nums[i]== 0)
                red++;
            else if (nums[i] == 1)
                white++;
            else
                blue++;
        }
        for (int i=0; i<nums.length; i++){
            if(i>=0 && i <red){
                nums[i] = 0;
            }
            else if(i>=red && i < red+white){
                nums[i] =1;
            }
            else{
                nums[i] = 2;
            }
        }
        //System.out.println("blue is " + blue);
        **/
    }
}

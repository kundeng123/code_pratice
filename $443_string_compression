class Solution(object):
    def compress(self, chars):
        """
        :type chars: List[str]
        :rtype: int
        """
        #complexity O(n)
        read = 0
        write = 0
        
        while read < len(chars) :
            print(read)
            c = chars[read]
            count = 0
            while read < len(chars) and chars[read] == c:
                
                count = count + 1
                read = read + 1
            chars[write] = c
            write = write + 1
            if count > 1:
                for count_c in str(count):
                    chars[write] = count_c
                    write = write + 1
        return write

// java version
T/S: O(n)/O(1)

class Solution {
    public int compress(char[] chars) {
        int len = chars.length;
	if (len < 2)
		return len;
	int i = 0; // slow pointer
	int j = 0; // fast pointer
	int head = 0; // writing head pointer

	while (j <= len) {
		while ((j < len) && (chars[i] == chars[j]))
			j++;
		chars[head++] = chars[i];
		int count = j - i;
		if (count > 1) {
			String s = Integer.toString(count);
			for (int k = 0; k < s.length(); k++)
				chars[head++] = s.charAt(k);
		}
		i = j;
		j++;
	}
        
        System.out.println(chars);
	return head;
    }
}

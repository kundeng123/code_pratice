class Solution(object):
    def largestNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: str
        """
        #using custom comparator python method, python 3 doesn't work!!
        #complexity: using sort, O(nlogn)
        def cmp_func(x, y):
            """Sorted by value of concatenated string increasingly."""
            if x + y > y + x:
                return -1
            elif x == y:
                return 0
            else:
                return 1
            
        sortedNum = sorted([str(x) for x in nums], cmp =cmp_func )
        if sortedNum[0] == '0':
            return '0'
        else:
            return ''.join(sortedNum)

#python 3 version
from functools import cmp_to_key 
class Solution:        
    def largestNumber(self, nums):
        
        def cmp_func(x, y):
            return int(y+x)-int(x+y)
        
        nums = [str(x) for x in nums]
        nums.sort(key =cmp_to_key(cmp_func) )

        print(nums)
        if nums[0] == '0':
            return '0'
        else:
            return ''.join(nums)
            

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        #a binary search tree: left child < node, 
        # right child > node
        # all subtree are BST
        
        # time complexity is O(n), n is the # of nodes. Space complexity is O(1)
        pVal = p.val
        qVal = q.val
        
        node = root
        
        #traverse tree
        while node:
            parentVal = node.val
            if pVal < parentVal and qVal < parentVal:
                node = node.left
            elif pVal > parentVal and qVal > parentVal:
                node = node.right
            else:
                return node
                
        
        
        
        
        

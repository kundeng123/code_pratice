/*
(1) multiple level, each level has multiple rows of spots

(2) can park motorcycles, cars and buses

(3) parking lot has motorcycle spots, compact spot, and large spot 

(4) a motorcycle can park in any spot

(5) car park in single compact spot or large spot

(6) bus can park in five large spots that are consecutive and within same row. it can not park in small spots
*/

public enum vehicleSize {
	Motorcycle;
	Compact;
	Large;
}

public abstract class Vehicle{
	protected int spotNeeded;
	protected VehicleSize size;
	protected String id;
	protected List<ParkingSpot> parkingSpots = new ArrayList<>();
	public int getSpotNeeded(){
	}
	public VehicleSize getSize(){
	}
	//might need more than one spot to park
	public void parkInSpot(ParkingSpot parkingSpot){
		this.parkingSpots.add(parkingSpot);
	}
	public void clearSpot(){
		for(int i = 0; i < parkingSpots.size(); i++){
			//todo
				
		}
	}
	//diff vehicle implement it differently
	public abstract boolean canFitInSpot(ParkingSpot parkingSpot){
		
	}
	public abstract void print(){
	}
}
public class MotorCycle extends Vehicle{
	public MotorCycle(){
		spotNeeded = 1;
		size = VehicleSize.Motorcycle;
	}
	//can fit in any spot
	public boolean canFitInSpot(ParkingSpot parkingSpot){
		return true;
	}
	public void print(){
		System.out.println("motorcycle");
	}
}
public class Car extends Vehicle{
	public Car(){
		spotNeeded = 1;
		size = VehicleSize.Compact;
	}
	//can fit in compact or large spot
	public boolean canFitInSpot(ParkingSpot parkingSpot){
		return parkingSpot.getSize() == VehicleSize.Compact || parkingSpot.getSize() == VehicleSize.Large;
	}
	public void print(){
		System.out.println("car");
	}
}

public class Bus extends Vehicle{
	public MotorCycle(){
		spotNeeded = 5;
		size = VehicleSize.Large;
	}
	//can fit in 5 consecutive large spots, but here only check single spot fits
	public boolean canFitInSpot(ParkingSpot parkingSpot){
		return parkingSpot.getSize() == VehicleSize.Large;
	}
	public void print(){
		System.out.println("bus");
	}
}


public class ParkingSpot{
	private Vehicle vehicle;
	private VehicleSize spotSize;
	private Level level;
	private int row;
	private int spotNumber;
	
	public ParkingSpot(Level level, int id, int row, VehicleSize vsize){
		this.level = level;
		this.spotNumber = id;
		this.row = row;
		this.spotSize = vsize;
	}
	public boolean isAvailable(){
		return vehicle == null;
	}
	
	public boolean canFitVehicle(Vehicle vehicle){
		return isAvailable() &&  vehicle.canFitInSpot(this);
	}
	public boolean park(Vehicle vehicle){
		if(!canFitVehicle){
			return false;
		}
		this.vehicle = vehicle;
		vehicle.parkInSpot(this);
		return true;
	}
	
	public void removeVehicle(){
		level.spotFreed();
		vehicle = null;
	}
	public int getRow() {
		return row;
	}
	
	public int getSpotNumber() {
		return spotNumber;
	}
	
	public VehicleSize getSize() {
		return spotSize;
	}
	public void print() {
		if (vehicle == null) {
			if (spotSize == VehicleSize.Compact) {
				System.out.print("compact");
			} else if (spotSize == VehicleSize.Large) {
				System.out.print("large");
			} else if (spotSize == VehicleSize.Motorcycle) {
				System.out.print("motorcycle");
			}
		} else {
			vehicle.print();
		}
	}
	
}

public class Level{
	private ParkingSpot[] parkingSpots;
	private int floor;
	private int availableSpots =0;
	private final int SPOT_PER_ROW = 10; //why static?
	
	public Level(int floor, int numberOfSpots){
		this.floor = floor;
		parkingSpots = new ParkingSpot[numberOfSpots];
		
		int largeSpot = numberOfSpots / 4;
		int compactSpot = numberOfSpots /4;
		int motorcycleSpot = numberOfSpots - largeSpot - compactSpot;
		
		for(int i =0; i<numberOfSpots; i++){
			VehicleSize size = VehicleSize.Motorcycle;
			
			if(i < largeSpot){
				size = VehicleSize.Large;
			}
			if(i < largeSpot + compactSpot){
				size = VehicleSize.Compact;
			}
			row = i / SPOT_PER_ROW;
			parkingSpots[i] = new ParkingSpot(this, i, row, size);
		}
	}
	//return index in parkingSpots[] if find, else -1
	public int findAvailableSpots(Vehicle vehicle){
		if(availableSpots <vehicle.getSpotNeeded()){
			return -1;
		}
		for(int i = 0; i < parkingSpots.length; i++){
			ParkingSpot spot = parkingSpots[i];
			spotsFound = 0;
			if (!spot.isAvailable()){
				continue;
			}
			
			if(spot.canFitVehicle(vehicle)){
				spotsFound++;
			}else{
				spotsFound = 0;
			}
			if(spotsFound == spotsNeeded){
				
				return i - (spotsNeeded - 1); // index of spot
			}
		}
		return -1;
	}
	
	/* Park a vehicle starting at the spot spotNumber, and continuing until vehicle.spotsNeeded. */
	public boolean parkStartingAtSpot(Vehicle vehicle) {
		vehicle.clearSpots();
 		int spotNumber = findAvaliableSpot(vehicle);
		boolean result = true;
		
		for (int i = spotNumber; i < spotNumber + vehicle.spotsNeeded; i++) {
			 result &= spots[i].park(vehicle);
		}
		
		availableSpots -= vehicle.spotsNeeded;
		return result;
	}
	
	public void spotFreed(){
		availableSpots++;
	}
	public int getAvailableSpots() {
		return availableSpots;
	}
	public void print() {
		int lastRow = -1;
		for (int i = 0; i < spots.length; i++) {
			ParkingSpot spot = spots[i];
			if (spot.getRow() != lastRow) {
				System.out.print("  ");
				lastRow = spot.getRow();
			}
			spot.print();
		}
	}
	
}

public class ParkingLot{
	private Level[] levels;
	private final int LEVEL_NUMS = 5;
	
	public ParkingLot(){
		levels = new Level[NUM_LEVELS];
		for (int i = 0; i < NUM_LEVELS; i++) {
			levels[i] = new Level(i, 30);
		}
	}
	public boolean parkVehicle(Vehicle vehicle){
		for(int i=0; i<levels.length; i++){
			if(levels[i].parkStartingAtSpot(vehicle)){
				return true;
			}
		}
		return false;	
	}
	public void print() {
		for (int i = 0; i < levels.length; i++) {
			System.out.print("Level" + i + ": ");
			levels[i].print();
			System.out.println("");
		}
		System.out.println("");
	}
	

}





























































































































































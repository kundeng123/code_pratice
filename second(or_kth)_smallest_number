def solution(nums):
    # time complexity is O(N) loop nums once
    if len(nums) == 1:
        return nums
    else:
        smallest = float('inf')
        secondSmallest = float('inf')

        #4,3,2,1

        for i in range(len(nums)):
            if nums[i] < smallest:
                secondSmallest = smallest
                smallest = nums[i]
            elif nums[i] > smallest and nums[i] < secondSmallest:
                secondSmallest = nums[i]


        if(secondSmallest == float('inf')):
            return 0

        return secondSmallest

nums = [2, 2, 5, 7, 3, 3, 1, 1]
print(solution(nums))

# for kth smallest, sort the list first:
# nums.sort() will take O(n log n) 
# return nums[k-1]

//Java solution
class Main {
  public static void main(String[] args) {
    //System.out.println("Hello world!");
    //find the second smallest number in list
    int[] number = {1,2,3,7,-4,-8,0};
    //System.out.println(number);
    if (number.length == 1)
      System.out.println(number[0]);
    else{
      int smallest = Integer.MAX_VALUE;
      int secondSmallest = Integer.MAX_VALUE;

      for(int i = 0; i< number.length; i++){
        if(number[i] < smallest){
          secondSmallest = smallest;
          smallest = number[i];
        }
        else if (number[i] > smallest && number[i] < secondSmallest){
          secondSmallest = number[i];
        }
      }

      if(secondSmallest == Integer.MAX_VALUE)
        System.out.println("0");
      else{
        System.out.println(secondSmallest);
      }

    }
  }
}
